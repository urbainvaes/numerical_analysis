---
title: "Numerical integration"
author: "Urbain Vaes"
institution: "Inria"
format:
    revealjs:
        theme: default
        width: 1400
        height: 800
        chalkboard: true
        transition: convex
        callout-appearance: minimal
        navigation-mode: vertical
jupyter: julia-1.8
---

## The problem

::: {.hidden}
$$
 \def\d{{\mathrm d}}
 \def\real{{\mathbf R}}
$$
:::

:::{.callout-tip}
## Objective: numerically calculate
$$
    I := \int_{\Omega} f(\mathbf x) \, \d \mathbf x
$$
where $\Omega \subset \mathbf R^d$ and $f\colon \Omega \to \real$.
:::

:::incremental
- For simplicity, we focus on the **one-dimensional** setting:  $\Omega = [-1, 1] \subset \real$.

- **Question:** can we approximate $I$ by a sum of the form

  $$
      \widehat I = \sum_{i=0}^n w_i \, f(x_i) \quad ?
  $$
:::

## The closed Newton-Cotes method {.smaller}

:::{.callout-tip}
## Main idea
- Calculate the polynomial interpolation $\widehat f$ of $f$ at equidistant nodes $-1 = x_0 < x_1 < \dots < x_{n-1} < x_n = 1$.

- Use the approximation

  $$
      \widehat I \approx \int_{-1}^{1} \widehat f(x) \, \d x
  $$
:::

:::incremental

- Explicit expression of the interpolating polynomial:
$$
\widehat f(x) = \sum_{i=0}^{n} f(x_i) \varphi_i(x),
\qquad \text{where} \qquad
\varphi_{i}(x) = \prod_{\substack{j = 0\\ j \neq i}}^{n} \frac {x - x_j} {x_i - x_j}.
$$

- We deduce that
$$
\widehat I
= \int_{-1}^{1} \widehat f(x) \, \d x
= \sum_{i=1}^n w_i f(x_i),
\qquad \text{with} \qquad
w_i := \int_{-1}^{1} \varphi_i(x) \, \d x.
$$
:::


## The closed Newton-Cotes method: Examples {.smaller}

$$~$$

| $n$  | $d$    | Method      | Integration formula                                                                                                                                                        |
| ---- | ------ | ---------   | --------------------------------                                                                                                                                           |
| 1    | 1      | Trapezoidal | $\widehat I = f(-1) + f(1)$                                                                                                                                                |
| 2    | 3      | Simpson     | $\widehat I = \frac{1}{3} f(-1) + \frac{4}{3} f(0) + \frac{1}{3} f(1)$                                                                                                     |
| 4    | 5      | Boole       | $\widehat I = \frac{7}{45} f(-1) + \frac{32}{45} f\left(-\frac{1}{2}\right) + \frac{12}{45} f\left(0\right) + \frac{32}{45} f\left(\frac{1}{2}\right) + \frac{7}{45} f(1)$ |

$$~$$

:::incremental
- Here $n =$ number of **integration nodes**

- Here $d =$ **degree of precision** $=$ the polynomial degree up to which the formula is exact

- In principle, integration rules of arbitrarily high degrees can be constructed by adding integration nodes.
:::

## The Newton-Cotes can fails with many nodes {.smaller}

... because polynomial interpolation does not always converge.
```{julia}
#| echo: true
#| code-fold: true
#| eval: true
import Polynomials
import Plots
Plots.default(linewidth=2)
x = -1:0.005:1
n = 12
f(x) = 1 / (1 + 25 * x^2)
X = LinRange(-1, 1, n)
p = Polynomials.fit(X, f.(X))
Plots.plot(x, f.(x), label="Runge function")
Plots.plot!(legend=:topright, size=(900,500))
label = "Newton-cotes with " * string(n) * " nodes"
Plots.plot!(x, p.(x), fillrange = 0 .* x, fillalpha = 0.35, label=label)
Plots.scatter!(X, f.(X), label="Interpolation nodes")
```
::: footer
Source: B. K. Nguyen's course in numerical analysis, see [here](https://nguyen.me.uk)
:::
